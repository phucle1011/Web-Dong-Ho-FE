import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import axios from "axios";
import Constants from "../../../../Constants.jsx";
import { uploadToCloudinary } from "../../../../Upload/uploadToCloudinary.js";
import { toast } from "react-toastify";
import { useNavigate, Link } from "react-router-dom";
import { Editor } from "@tinymce/tinymce-react";
import Select from "react-select";
import AddBrandModal from "../addBrandModal/AddBrandModal.jsx"; // ƒë∆∞·ªùng d·∫´n t√πy b·∫°n
import AddCategoryModal from "../addBrandModal/AddCategoryModal";
import ParentComponent from "../cartOne/ParentComponent.jsx"; // ƒë∆∞·ªùng d·∫´n t√πy v√†o n∆°i b·∫°n ƒë·∫∑t file
import { deleteImageFromCloudinary } from "../../../../Upload/uploadToCloudinary.js";

import CustomUploadAdapter from "../../../../Upload/CustomUploadAdapter";
const StatusEnum = {
  DRAFT: "DRAFT",
  PUBLISHED: "PUBLISHED",
};
const AddProduct = () => {
  const {
    register,
    handleSubmit,
    watch,
    formState: { errors },
    reset,
    setValue, // ‚úÖ th√™m d√≤ng n√†y
    trigger, // ‚úÖ v√† d√≤ng n√†y
  } = useForm({
    defaultValues: {
      is_featured: StatusEnum.DRAFT,
    },
  });

  const navigate = useNavigate();

  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");
  const [brandOptions, setBrandOptions] = useState([]);
  const [categoryOptions, setCategoryOptions] = useState([]);
  const [thumbnailFile, setThumbnailFile] = useState(null);
  const [thumbnailUrl, setThumbnailUrl] = useState("");
  const [uploading, setUploading] = useState(false);
  const [description, setDescription] = useState("");
  const status = watch("status");
  const [showBrandModal, setShowBrandModal] = useState(false);
  const [showCategoryModal, setShowCategoryModal] = useState(false);
  const [slugEdit, setSlugEdit] = useState(false); // C√≥ ƒëang ch·ªânh slug th·ªß c√¥ng kh√¥ng?

  const [variants, setVariants] = useState([]);
  const [attributes, setAttributes] = useState([]);
// g·∫ßn c√°c useState kh√°c
const [isUploadingThumb, setIsUploadingThumb] = useState(false);
// g·∫ßn c√°c useState kh√°c:
const [activeVariantUploads, setActiveVariantUploads] = useState(0); // s·ªë upload bi·∫øn th·ªÉ ƒëang ch·∫°y

  const handleBrandAdded = () => {
    setShowBrandModal(false);
    fetchData(); // ho·∫∑c reload brandOptions n·∫øu c·∫ßn
  };

  const handleCategoryAdded = () => {
    setShowCategoryModal(false);
    fetchData(); // load l·∫°i danh s√°ch category
  };

  // üëá Di chuy·ªÉn ra ngo√†i useEffect ƒë·ªÉ d√πng ƒë∆∞·ª£c ·ªü nhi·ªÅu ch·ªó
  const fetchData = async () => {
    try {
      const [categoryRes, brandRes] = await Promise.all([
        axios.get(`${Constants.DOMAIN_API}/admin/product/get-category`),
        axios.get(`${Constants.DOMAIN_API}/admin//product/get-brand`),
      ]);

      const brandList = brandRes.data.data || [];
      const categoryList = categoryRes.data.data || [];

      const brandData = brandList
        .filter((brand) => brand.status === "active")
        .map((brand) => ({
          value: brand.id,
          label: brand.name,
        }));

      const categoryData = categoryList
        .filter((cat) => cat.status === "active")
        .map((cat) => ({
          value: cat.id,
          label: cat.name,
        }));

      setBrandOptions(brandData);
      setCategoryOptions(categoryData);
    } catch (err) {
      console.error("L·ªói khi load category/brand:", err);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // G·ªçi API l·∫•y danh s√°ch danh m·ª•c v√† th∆∞∆°ng hi·ªáu
  useEffect(() => {
    fetchData();
  }, []);
  useEffect(() => {
    const fetchAttributes = async () => {
      const res = await axios.get(
        `${Constants.DOMAIN_API}/admin/product-attributes`
      );
      setAttributes(res.data.data);
      // tu·ª≥ theo API tr·∫£ g√¨
    };
    fetchAttributes();
  }, []);
  useEffect(() => {
    if (!slugEdit) {
      const name = watch("name");
      const slug = generateSlug(name || "");
      setValue("slug", slug);
      trigger("slug");
    }
  }, [watch("name")]);

  function CustomUploadAdapterPlugin(editor) {
    editor.plugins.get("FileRepository").createUploadAdapter = (loader) => {
      return new CustomUploadAdapter(loader);
    };
  }
  const onSubmit = async (formData) => {
    setLoading(true);
    setMessage("");

    try {
       // ‚ùå Ch·∫∑n n·∫øu thumbnail ƒëang upload
    if (isUploadingThumb) {
      toast.error("Vui l√≤ng ƒë·ª£i upload ·∫£nh ƒë·∫°i di·ªán xong.");
      setLoading(false);
      return;
    }

    // ‚ùå Ch·∫∑n n·∫øu bi·∫øn th·ªÉ ƒëang upload
    if (activeVariantUploads > 0) {
      toast.error("Vui l√≤ng ƒë·ª£i upload ·∫£nh bi·∫øn th·ªÉ ho√†n t·∫•t.");
      setLoading(false);
      return;
    }

    // ‚ùå Ch·∫∑n n·∫øu c√≥ ·∫£nh bi·∫øn th·ªÉ ch∆∞a c√≥ url/public_id
    for (let i = 0; i < variants.length; i++) {
      const v = variants[i];
      if (Array.isArray(v.images) && v.images.length > 0) {
        const invalid = v.images.some(img => !img?.url || !img?.public_id);
        if (invalid) {
          toast.error(`·∫¢nh c·ªßa bi·∫øn th·ªÉ #${i + 1} ch∆∞a upload xong.`);
          setLoading(false);
          return;
        }
      }
    }

    // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu bi·∫øn th·ªÉ nh∆∞ c≈©...
    for (let i = 0; i < variants.length; i++) {
      const variant = variants[i];
      if (
        !variant.sku?.trim() ||
        !variant.stock?.toString().trim() ||
        !variant.price?.toString().trim() ||
        !variant.attributes?.length
      ) {
        toast.error(` Bi·∫øn th·ªÉ ${i + 1} ƒëang thi·∫øu th√¥ng tin b·∫Øt bu·ªôc.`);
        setLoading(false);
        return;
      }
    }

    // ‚úÖ L∆∞u √Ω: thumbnailUrl l√† object {url, public_id}
    const productData = {
      ...formData,
      thumbnail: thumbnailUrl?.url || "",   // <-- ch·ªânh ch·ªó n√†y
      description: description,
    };
      

      

      const productRes = await axios.post(
        `${Constants.DOMAIN_API}/admin/products`,
        productData
      );
      const newProductId = productRes.data.product.id;

      // B∆∞·ªõc 3: G·ª≠i t·ª´ng bi·∫øn th·ªÉ
      for (const variant of variants) {
        const variantData = {
          ...variant,
          images: variant.images.map((img) => img.url),
        };

        await axios.post(
          `${Constants.DOMAIN_API}/admin/products/${newProductId}/variants`,
          variantData
        );
      }

      toast.success(" Th√™m s·∫£n ph·∫©m v√† bi·∫øn th·ªÉ th√†nh c√¥ng!");
      navigate("/admin/products/getAll");

      // Reset form
      reset();
      setThumbnailFile(null);
      setThumbnailUrl("");
    } catch (error) {
      console.error(error);
      toast.error(" L·ªói: " + (error.response?.data?.error || "Kh√¥ng x√°c ƒë·ªãnh"));
    } finally {
      setLoading(false);
    }
  };

  const handleThumbnailChange = async (e) => {
  const file = e.target.files[0];
  if (!file) return;

  setIsUploadingThumb(true); // ‚¨ÖÔ∏è kh√≥a submit
  try {
    const res = await uploadToCloudinary(file); // gi·∫£ ƒë·ªãnh tr·∫£ { url, public_id }
    setThumbnailUrl(res);                        // ‚¨ÖÔ∏è l∆∞u c·∫£ object
    toast.success("Upload ·∫£nh th√†nh c√¥ng");
  } catch (err) {
    console.error("Upload failed:", err);
    toast.error("Upload ·∫£nh th·∫•t b·∫°i");
  } finally {
    setIsUploadingThumb(false); // ‚¨ÖÔ∏è m·ªü submit
  }
};

  const generateSlug = (text) => {
    return text
      .toLowerCase()
      .normalize("NFD") 
      .replace(/[\u0300-\u036f]/g, "") 
      .replace(/[^a-z0-9 -]/g, "") 
      .trim()
      .replace(/\s+/g, "-") 
      .replace(/-+/g, "-"); 
  };

const handleCancel = async () => {
  try {
    // Xo√° ·∫£nh thumbnail n·∫øu c√≥
    if (thumbnailUrl?.public_id) {
      await axios.post(`${Constants.DOMAIN_API}/admin/products/imagesClauding`, {
        public_id: thumbnailUrl.public_id,
      });
      console.log("ƒê√£ xo√° ·∫£nh thumbnail:", thumbnailUrl.public_id);
    }

    // Xo√° ·∫£nh trong t·ª´ng bi·∫øn th·ªÉ
    for (const variant of variants) {
      if (Array.isArray(variant.images)) {
        for (const img of variant.images) {
          if (img.public_id) {
            await axios.post(`${Constants.DOMAIN_API}/admin/products/imagesClauding`, {
              public_id: img.public_id,
            });
            console.log("ƒê√£ xo√° ·∫£nh bi·∫øn th·ªÉ:", img.public_id);
          }
        }
      }
    }
  } catch (error) {
    console.error("L·ªói khi xo√° ·∫£nh Cloudinary:", error);
  }

  navigate("/admin/products/getAll");
};


  return (
    <div className="max-w-screen-xl mx-auto bg-white p-5 md:p-10 rounded shadow mt-2 mb-2">
      <h2 className="text-2xl font-semibold mb-6">Th√™m s·∫£n ph·∫©m m·ªõi</h2>

      {message && <p className="mb-4 text-sm text-blue-600">{message}</p>}

      <form onSubmit={handleSubmit(onSubmit)} noValidate>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* T√™n s·∫£n ph·∫©m */}
          {/* T√™n s·∫£n ph·∫©m */}
          <div className="col-span-1 border p-3 rounded">
            <div className="flex items-center justify-between mb-1">
              <label className="form-label">
                T√™n s·∫£n ph·∫©m
                <span style={{ color: "red", fontWeight: "bold" }}>*</span>
              </label>
            </div>
            <input
              type="text"
              className="form-control"
              {...register("name", { required: "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m" })}
            />
            {errors.name && (
              <small className="text-danger">{errors.name.message}</small>
            )}

            <div className="flex items-center justify-between mb-1 pt-4">
              <label className="form-label">Slug</label>
            </div>
            <input
              type="text"
              readOnly
              className="w-full px-4 py-2 rounded-lg border border-gray-300 bg-gray-100 text-gray-500 cursor-not-allowed"
              value={watch("slug") || ""}
              {...register("slug")}
              onFocus={() => setSlugEdit(true)}
              onBlur={() => setSlugEdit(false)}
              onChange={(e) => {
                setValue("slug", e.target.value);
                trigger("slug");
              }}
              disabled={false} // ho·∫∑c cho ph√©p ch·ªânh s·ª≠a n·∫øu c·∫ßn
            />

            {errors.slug && (
              <small className="text-danger">{errors.slug.message}</small>
            )}
          </div>

          {/* Th∆∞∆°ng hi·ªáu */}
          <div className="col-span-1 border p-3 rounded">
            {/* ========== TH∆Ø∆†NG HI·ªÜU ========== */}
            <div className="flex items-center justify-between mb-1">
              <label className="form-label">
                Th∆∞∆°ng hi·ªáu
                <span style={{ color: "red", fontWeight: "bold" }}>*</span>
              </label>
              <button
                type="button"
                onClick={() => setShowBrandModal(true)}
                className="text-blue-600  text-sm"
              >
                + Th√™m th∆∞∆°ng hi·ªáu
              </button>
            </div>

            <Select
            
              options={brandOptions}
              className="basic-single-select"
              classNamePrefix="select"
              onChange={(selectedOption) => {
                const value = selectedOption ? selectedOption.value : null;
                setValue("brand_id", value);
                trigger("brand_id");
              }}
              placeholder="Ch·ªçn th∆∞∆°ng hi·ªáu..."
              isClearable
              menuPortalTarget={document.body}
              styles={{ menuPortal: (base) => ({ ...base, zIndex: 9999 }) }}
            />
            <input
              type="hidden"
              {...register("brand_id", {
                required: "Vui l√≤ng ch·ªçn 1 th∆∞∆°ng hi·ªáu",
              })}
            />
            {errors.brand_id && (
              <small className="text-danger">{errors.brand_id.message}</small>
            )}

            

            {/* ========== DANH M·ª§C ========== */}

            <div className="flex items-center justify-between mt-4 mb-1">
              <label className="form-label">
                Danh m·ª•c
                <span style={{ color: "red", fontWeight: "bold" }}>*</span>
              </label>
              <button
                type="button"
                onClick={() => setShowCategoryModal(true)}
                className="text-blue-600  text-sm"
              >
                + Th√™m danh m·ª•c
              </button>
            </div>

            <Select
  options={categoryOptions}
  className="basic-single-select"
  classNamePrefix="select"
  onChange={(selectedOption) => {
    const value = selectedOption ? selectedOption.value : null;
    setValue("category_id", value);
    trigger("category_id");
  }}
  placeholder="Ch·ªçn danh m·ª•c..."
  isClearable
  menuPortalTarget={document.body}
  styles={{ menuPortal: (base) => ({ ...base, zIndex: 9999 }) }}
/>

<input
  type="hidden"
  {...register("category_id", {
    required: "Vui l√≤ng ch·ªçn 1 danh m·ª•c",
  })}
/>

            {errors.category_id && (
              <small className="text-danger">
                {errors.category_id.message}
              </small>
            )}

            {showCategoryModal && (
              <AddCategoryModal
                onClose={() => setShowCategoryModal(false)}
                onSuccess={handleCategoryAdded}
              />
            )}
          </div>

          {/* C·ªôt tr√°i: upload ·∫£nh */}
          <div className="col-span-1 border p-3 rounded">
            <label className="block font-medium mb-1 text-sm">
              ·∫¢nh s·∫£n ph·∫©m{" "}
              <span style={{ color: "red", fontWeight: "bold" }}>*</span>
            </label>
            <input
              type="file"
              className="w-full border px-3 py-2 rounded text-sm"
              accept="image/*"
              onChange={handleThumbnailChange}
            />
            {thumbnailUrl && (
              <img
                src={thumbnailUrl.url}
                alt="Preview"
                className="mt-2 w-full h-auto max-h-48 object-contain border rounded"
              />
            )}
          </div>

          {/* C·ªôt ph·∫£i: tr·∫°ng th√°i + n√∫t */}
          <div className="border p-3 rounded flex flex-col justify-between">
            <fieldset className="mb-4">
              <legend className="fs-5 fw-semibold text-dark mb-3">
                T√πy ch·ªçn s·∫£n ph·∫©m
              </legend>

              <div className="d-flex justify-content-end gap-5">
                {/* Toggle Xu·∫•t b·∫£n */}
                <div className="form-check form-switch d-flex align-items-center gap-2">
                  <input
                    type="checkbox"
                    className="form-check-input"
                    id="statusSwitch"
                    {...register("status")}
                    defaultChecked={true}
                  />
                  <label
                    className="form-check-label"
                    htmlFor="statusSwitch"
                    style={{ minWidth: "70px", textAlign: "left" }}
                  >
                    {watch("status") ? " Hi·ªÉn th·ªã" : " ·∫®n "}
                  </label>
                </div>

                {/* Toggle Hi·ªÉn th·ªã tr√™n trang ch·ªß */}
                <div className="form-check form-switch d-flex align-items-center gap-2">
                  <input
                    type="checkbox"
                    className="form-check-input"
                    id="featuredSwitch"
                    onChange={(e) => {
                      setValue(
                        "is_featured",
                        e.target.checked
                          ? StatusEnum.PUBLISHED
                          : StatusEnum.DRAFT
                      );
                    }}
                    checked={watch("is_featured") === StatusEnum.PUBLISHED}
                  />
                  <label
                    className="form-check-label"
                    htmlFor="featuredSwitch"
                    style={{ minWidth: "70px", textAlign: "left" }}
                  >
                    {watch("is_featured") === StatusEnum.PUBLISHED
                      ? "Xu·∫•t b·∫£n"
                      : "Nh√°p"}
                  </label>
                </div>
              </div>
            </fieldset>

            {/* N√∫t submit */}
            <div className="flex justify-end items-center gap-2 pt-2 border-t mt-auto">
              <button
                type="button"
                onClick={handleCancel}
                className="bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600"
              >
                Quay l·∫°i
              </button>

<button
  type="submit"
  disabled={loading || isUploadingThumb || activeVariantUploads > 0}
  className={`bg-[#073272] text-white px-6 py-2 rounded transition ${
    loading || isUploadingThumb || activeVariantUploads > 0
      ? "opacity-50 cursor-not-allowed"
      : "hover:bg-[#052354]"
  }`}
>
  {loading
    ? "ƒêang th√™m..."
    : isUploadingThumb
    ? "ƒêang t·∫£i ·∫£nh ƒë·∫°i di·ªán..."
    : activeVariantUploads > 0
    ? "ƒêang t·∫£i ·∫£nh bi·∫øn th·ªÉ..."
    : "Th√™m s·∫£n ph·∫©m"}
</button>


            </div>
          </div>

          {/* M√¥ t·∫£ ng·∫Øn */}
          <div className="col-span-2">
            <label className="block font-medium mb-1 text-sm mb-2">
              M√¥ t·∫£ ng·∫Øn
            </label>
            <textarea
              className="w-full border px-3 py-2 rounded text-sm"
              rows="3"
              {...register("short_description", {
                maxLength: {
                  value: 100,
                  message: "T·ªëi ƒëa 100 k√Ω t·ª±",
                },
              })}
              placeholder="Nh·∫≠p m√¥ t·∫£ ng·∫Øn..."
            ></textarea>
            {errors.short_description && (
              <small className="text-danger">
                {errors.short_description.message}
              </small>
            )}
          </div>

          {/* M√¥ t·∫£ (chi·∫øm to√†n b·ªô 3 c·ªôt) */}
          <div className="col-span-2">
            <label className="block font-medium mb-1 text-sm mb-2">M√¥ t·∫£</label>
            <div className="bg-white border rounded">
              <Editor
                apiKey="242t4tlz75qp0zzr2tgk6oz501hd80om15fr7rykscdflilg"
                value={description}
                init={{
                  height: 400,
                  menubar: true,
                  plugins: [
                    "advlist",
                    "autolink",
                    "lists",
                    "link",
                    "image",
                    "charmap",
                    "preview",
                    "anchor",
                    "searchreplace",
                    "visualblocks",
                    "code",
                    "fullscreen",
                    "insertdatetime",
                    "media",
                    "table",
                    "help",
                    "wordcount",
                  ],
                  toolbar:
                    "undo redo | formatselect | bold italic backcolor | \
             alignleft aligncenter alignright alignjustify | \
             bullist numlist outdent indent | image | help",
                  image_title: true,
                  automatic_uploads: true,
                  file_picker_types: "image",
                  file_picker_callback: function (cb, value, meta) {
                    const input = document.createElement("input");
                    input.setAttribute("type", "file");
                    input.setAttribute("accept", "image/*");
                    input.onchange = async function () {
                      const file = input.files[0];
                      if (!file) return;
                      try {
                        const result = await uploadToCloudinary(file);
                        cb(result.url, { title: file.name });
                      } catch (err) {
                        console.error("Upload l·ªói:", err);
                      }
                    };
                    input.click();
                  },
                }}
                onEditorChange={(content) => setDescription(content)}
              />
            </div>
          </div>
        </div>
        <div className="col-span-1 border p-3 rounded">
          <ParentComponent
  allAttributes={attributes}
  onVariantsChange={setVariants}
  onVariantUploadStart={() => setActiveVariantUploads(n => n + 1)}
  onVariantUploadDone={() => setActiveVariantUploads(n => Math.max(0, n - 1))}
/>

        </div>
      </form>
      {showBrandModal && (
              <AddBrandModal
                onClose={() => setShowBrandModal(false)}
                onSuccess={handleBrandAdded}
              />
            )}
    </div>
  );
};

export default AddProduct;
